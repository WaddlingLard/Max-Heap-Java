# Project 2: Stardew Valley using Priority Queue

* Author: Brian Wu  
* Class: CS321 Section #001
* Semester: Spring 2023

## Overview

This program has several classes, but the main purpose is that it can store tasks
that are comparable in a max heap. A way to interact with it is by using the MyPriorityQueue class.

## Reflection

This project was fun and stressful. I always wonder if in real life will there be 
pseudocode handed to me at this level. It is an understatement to say that it helped me.
That being said there were many things that I learned during this project. Copying down
provided code wasn't the only thing that happened. I grasped a better understanding of Generics.
I feel that it is a valuable skill that other programmers didn't gain from not doing the 
extra credit. I liked the use of an ArrayList as opposed to using an array. I don't like
arrays that much. I've always found the list variant to be more versatile. Anyways, another
thing I reinforced was debugging. It's something that I'm still a novice too and I wish 
coding classes did a better job at teaching it. Debugging is an essential task in coding 
and it helped me find the problem in my code that caused hours of stress. What is that problem?
I wasn't aware that the compareTo method for the Task object should include the priorityLevel
AND the hourCreated. I didn't know that at the time and tried numerous fixes including creating
whole new methods in order to fix the problem. Eventually, I found out about it. A couple of hours later
and everything is working. Crazy huh?

I have some regrets like not fully reading the project specifications. That 
was probably the biggest bite that dragged me down. I have to thank Troy, one of
the TAs. They let me know about this and it's what helped me get back on track. 
This project tested my patience and it taught me one important thing. It's helpful
to take a breather and come back at another time. I'm currently remembering all
of the frustration that built up seeing failed test after failed test. Make sure to
read the project specifications, everyone! I let that get the best of me and I'll make
sure that doesn't happen again. One thing I want to mention is my slightly clever way
of managing a generic value in my increaseHeapKey() and heapInsert() methods. Using
the getClass() method you are able to verify if an element is of a specific class. I'm
not sure if this was the intended way of solving the problem, but I saw that method 
under the autogenerated method popout box thing and it got my brain cooking.
Overall, good project! ALSO, if it wasn't made clear. I
did the generic extra credit portion.

## Compiling and Using

Compiling this code is relatively simple to do. 
First, you compile all the files(in the correct directory) by using this command:

javac *.java

Then, you call the MyLifeInStardew class by using this command structure:

java MyLifeInStardew (max-priority) (time-to-increment-priority) (total simulation-time in days) (task-generation-probability) [seed]

You can create many simulations with the provided command above. Get creative!
When you input the command the console will output the simulation there
is no additional input required.

## Results 

The testing for this project was rigorous and REALLY tested my patience.
As I go in-depth in the reflection section you'll understand why. I struggled
with all the tests but specifically, 4 and 6 troubled me. I did triumph. Otherwise,
why would I be typing this now? I'm happy to say the code provided passes all
the tests. I now know how to make a maxHeap and have extensive knowledge of it.
I might even be an expert now(Pay me).

## Sources used

As I did the generic extra credit I used the sources provided in the assignment to help me. 
I went with the ArrayList option as it sounded easier. I'm not sure if my judgment was right,
but it was done nonetheless.

https://www.geeksforgeeks.org/generics-in-java/

https://www.baeldung.com/java-generics

https://www.baeldung.com/java-generic-array

----------

## Notes

* This README template is using Markdown. Here is some help on using Markdown: 
[markdown cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)


* Markdown can be edited and viewed natively in most IDEs such as Eclipse and VS Code. Just toggle
between the Markdown source and preview tabs.

* To preview your README.md output online, you can copy your file contents to a Markdown editor/previewer
such as [https://stackedit.io/editor](https://stackedit.io/editor).